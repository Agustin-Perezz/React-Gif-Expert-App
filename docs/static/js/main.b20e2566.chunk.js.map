{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GridItems.js","hooks/useFetchApi.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","value","type","onChange","target","GifGridItem","url","title","id","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GridItems","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchApi","console","log","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"uMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE9B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACC,sBAAMC,SAVc,SAACC,GACrBA,EAAEC,iBACGJ,EAAWK,OAAOC,OAAS,IAC/BR,GAAe,SAAAS,GAAI,OAAOP,GAAP,mBAAsBO,OACzCN,EAAe,MAMhB,SACC,uBACCO,MAAOR,EACPS,KAAK,OACLC,SAlBuB,SAACP,GAC1BF,EAAeE,EAAEQ,OAAOH,a,QCPbI,EAAc,SAAC,GAA0B,IAAvBC,EAAsB,EAAtBA,IAASC,GAAa,EAAjBC,GAAiB,EAAbD,OAEvC,OACC,sBAAKE,UAAU,yCAAf,UACC,qBAAKC,IAAMJ,EAAMK,IAAOJ,IACxB,qBAAKE,UAAU,QAAf,SACC,kCAAMF,EAAN,a,uBCNSK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfR,EAFe,iDAEkCS,UAAWF,GAF7C,gEAGFG,MAAOV,GAHL,cAGfW,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC7B,MAAO,CACNd,GAAIc,EAAId,GACRD,MAAOe,EAAIf,MACXD,IAAG,UAAEgB,EAAIC,cAAN,aAAE,EAAYC,iBAAiBlB,QAVf,kBAcdc,GAdc,4CAAH,sDCEPK,EAAY,SAAC,GAAoB,IAAjBZ,EAAgB,EAAhBA,SAI5B,ECJ0B,SAAEA,GAE5B,MAA0BrB,mBAAS,CAClC2B,KAAM,GACNO,SAAS,IAFV,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdCC,qBAAW,WACVjB,EAASC,GACPiB,MAAM,SAAAC,GAENC,YAAY,WACXJ,EAAS,CACRT,KAAMY,EACNL,SAAS,GACP,aAIJ,CAAEb,IAECc,EDjB0BM,CAAapB,GAAtCa,EAAR,EAAQA,QAAcH,EAAtB,EAAiBJ,KAIjB,OAHAe,QAAQC,IAAKZ,GAIZ,qCACC,mCAAOV,EAAP,OACEa,GAAW,YACb,qBAAKjB,UAAU,YAAf,SAGEc,EAAOF,KAAK,SAACC,GACZ,OAAO,cAAC,EAAD,eAEDA,GADEA,EAAId,aESH4B,EAzBM,WACpB,MAAoC5C,mBAAS,CAAC,cAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAEA,OACC,qCACC,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAiBA,IAE9B,6BAEE8C,EAAWhB,KAAK,SAAAR,GACf,OAAO,cAAC,EAAD,CAENA,SAAWA,GADLA,Y,MCbbyB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.b20e2566.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nexport const AddCategory = ( { setCategorias } ) => {\r\n\r\n\tconst [inputValue, setInputValue] = useState('');\r\n\r\n\tconst handleEventChange = (e) => {\r\n\t\tsetInputValue( e.target.value );\r\n\t}\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tif ( inputValue.trim().length > 2 ) {\r\n\t\t\tsetCategorias( cats => [  inputValue, ...cats, ]);\r\n\t\t\tsetInputValue( '' );\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form onSubmit={ handleSubmit }>\r\n\t\t\t<input \r\n\t\t\t\tvalue={inputValue}\r\n\t\t\t\ttype=\"text\" \r\n\t\t\t\tonChange={ handleEventChange }\r\n\t\t\t/>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nAddCategory.propTypes = {\r\n\tsetCategorias: PropTypes.func.isRequired\r\n}\r\n","\r\nexport const GifGridItem = ( { url, id, title } ) => {\r\n\r\n\treturn (\r\n\t\t<div className=\"card animate__animated animate__fadeIn\">\r\n\t\t\t<img src={ url } alt= { title } />\r\n\t\t\t<div className=\"title\">\r\n\t\t\t\t<p> { title } </p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n","\r\nexport const getGifs = async( category ) => {\r\n\r\n\t\tconst url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) } &limit=10&api_key=FMhyGibIwevlIDT96VLM3CQUnXKiubk2`;\t\r\n\t\tconst resp = await fetch( url ); \r\n\t\tconst { data } = await resp.json();\r\n\r\n\t\tconst gifs = data.map( img => {\r\n\t\t\treturn {\r\n\t\t\t\tid: img.id,\r\n\t\t\t\ttitle: img.title,\r\n\t\t\t\turl: img.images?.downsized_medium.url\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn gifs; \r\n\r\n\t}\r\n","import { GifGridItem } from './GifGridItem'\r\nimport { useFetchApi } from \"../hooks/useFetchApi\"\r\n\r\nexport const GridItems = ( { category } ) => {\r\n\r\n\t// const [images, setImages] = useState([]);\r\n\r\n\tconst { loading, data:images } = useFetchApi( category );\r\n\tconsole.log( images )\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3> { category } </h3>\t\r\n\t\t\t{ loading && 'Loading..'}\r\n\t\t\t<div className=\"card-grid\">\r\n\r\n\t\t\t\t{\r\n\t\t\t\t\timages.map( (img) => {\r\n\t\t\t\t\t\treturn <GifGridItem \r\n\t\t\t\t\t\t\tkey= { img.id }\r\n\t\t\t\t\t\t\t{ ...img }\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t</div> \r\n\t\t</>\r\n\t)\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchApi = ( category ) => {\r\n\r\n\tconst [state, setstate] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true\r\n\t})\r\n\r\n\t\tuseEffect( () => {\r\n\t\t\tgetGifs( category )\r\n\t\t\t\t.then( imgs => {\r\n\r\n\t\t\t\t\tsetTimeout( () => {\r\n\t\t\t\t\t setstate({\r\n\t\t\t\t\t\t data: imgs,\r\n\t\t\t\t\t\t loading: false\r\n\t\t\t\t\t }, 4000);\r\n\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t}, [ category ])\r\n\r\n\treturn state;\r\n\r\n}","import React, { useState } from 'react'\r\nimport {AddCategory} from './components/AddCategory'\r\nimport {GridItems} from './components/GridItems'\r\n\r\nconst GifExpertApp = () => {\r\n\tconst [categorias, setCategorias] = useState(['One Punch'])\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h2>GifExpertApp</h2>\t\r\n\t\t\t<hr />\r\n\t\t\t<AddCategory setCategorias= { setCategorias } />\r\n\t\t\r\n\t\t\t<ol>\r\n\t\t\t\t{\r\n\t\t\t\t\tcategorias.map( category  => {\r\n\t\t\t\t\t\treturn <GridItems \r\n\t\t\t\t\t\t\tkey={ category }\r\n\t\t\t\t\t\t\tcategory={ category }\r\n\t\t\t\t\t\t/> \r\n\t\t\t\t\t})\t\r\n\t\t\t\t}\r\n\t\t\t</ol>\r\n\t\t\t\r\n\t\t</>\r\n\t)\r\n}\r\n\r\n\r\nexport default GifExpertApp\r\n","import ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}